/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if ((from && typeof from === "object") || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, {
          get: () => from[key],
          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable,
        });
  }
  return to;
};
var __toCommonJS = (mod) =>
  __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin,
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  mySetting: "apiKey",
};
var apiKey = "";
var makeToDoistRequest = async (url, method, body) => {
  const headers = new Headers();
  headers.set("Content-Type", "application/json");
  headers.set("Accept", "application/json");
  headers.set("Authorization", "Bearer " + apiKey);
  const request = new Request(url, {
    method,
    headers,
    body,
  });
  return fetch(request)
    .then((res) => res.json())
    .then((res) => {
      return res;
    });
};
var createRequest = async () => {
  return makeToDoistRequest(
    "https://api.todoist.com/rest/v2/tasks?filter=overdue",
    "GET"
  );
};
var updateTask = async (id, postpone) => {
  return makeToDoistRequest(
    "https://api.todoist.com/rest/v2/tasks/" + id + "/close",
    "POST",
    JSON.stringify({
      due_string: postpone,
    })
  );
};
var completeTask = async (id) => {
  return makeToDoistRequest(
    "https://api.todoist.com/rest/v2/tasks/" + id + "/close",
    "POST"
  );
};
var changeButtonColor = (buttonID, id) => {
  let button = document.getElementById(buttonID);
  const accent = getComputedStyle(button).getPropertyValue("--color-accent");
  const color = getComputedStyle(button).getPropertyValue(
    "--interactive-normal"
  );
  ["week", "tomorrow", "today"].forEach((b) => {
    let current = document.getElementById(id + "-" + b + "-button");
    current.style.backgroundColor = color;
  });
  button.style.backgroundColor = accent;
};
var completeButton = (buttonID, id) => {
  return () => {
    changeButtonColor(buttonID, id);
    completeTask(id);
  };
};
var buttonClicker = (buttonID, id, postpone) => {
  return () => {
    changeButtonColor(buttonID, id);
    updateTask(id, postpone);
  };
};
var convertTaskToHTML = (data) => {
  const main = document.createElement("div");
  main.style.marginBottom = "1em";
  const text = document.createElement("div");
  text.style.marginBottom = "0.5em";
  text.textContent = data["content"];
  main.appendChild(text);
  const week = document.createElement("button");
  week.style.marginRight = "1.5em";
  week.textContent = "Next Week";
  const weekID = data["id"] + "-week-button";
  week.id = weekID;
  week.onClickEvent(buttonClicker(weekID, data["id"], "next week"));
  const tomorrow = document.createElement("button");
  tomorrow.style.marginRight = "1.5em";
  tomorrow.textContent = "Tomorrow";
  const tomorrowID = data["id"] + "-tomorrow-button";
  tomorrow.id = tomorrowID;
  tomorrow.onClickEvent(buttonClicker(tomorrowID, data["id"], "tomorrow"));
  const today = document.createElement("button");
  today.textContent = "Today";
  today.style.marginRight = "1.5em";
  const todayID = data["id"] + "-today-button";
  today.id = todayID;
  today.onClickEvent(buttonClicker(todayID, data["id"], "today"));
  const complete = document.createElement("button");
  complete.textContent = "Complete";
  const completeID = data["id"] + "-complete-button";
  complete.id = completeID;
  complete.onClickEvent(completeButton(completeID, data["id"]));
  main.appendChild(week);
  main.appendChild(tomorrow);
  main.appendChild(today);
  main.appendChild(complete);
  return main;
};
var codeProcessor = async (source, el, ctx) => {
  const main = document.createElement("p");
  const data = await createRequest();
  if (data.length < 1) {
    const text = document.createElement("div");
    text.textContent = "All caught up \u{1F604}";
    main.appendChild(text);
  } else {
    data.map((d) => main.appendChild(convertTaskToHTML(d)));
  }
  el.appendChild(main);
  return;
};
var MyPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    apiKey = this.settings.mySetting;
    this.registerMarkdownCodeBlockProcessor("todoist-review", codeProcessor);
    this.addSettingTab(new SampleSettingTab(this.app, this));
  }
  onunload() {}
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl)
      .setName("Todoist API Key")
      .setDesc("")
      .addText((text) =>
        text
          .setPlaceholder("Enter your secret")
          .setValue(this.plugin.settings.mySetting)
          .onChange(async (value) => {
            this.plugin.settings.mySetting = value;
            await this.plugin.saveSettings();
          })
      );
  }
};
